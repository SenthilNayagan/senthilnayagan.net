<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Senthil Nayagan</title>
  <subtitle>A blog covers personal thoughts, design and coding principles, AI, and a variety of topics.</subtitle>
  <link href="https://www.senthilnayagan.net/feed.xml" rel="self"/>
  <link href="https://www.senthilnayagan.net/" rel="alternate" type="text/html"/>
  <updated>2024-06-16T00:00:00.000Z</updated>
  <id>https://www.senthilnayagan.net/</id>
  <author>
    <name>Senthil Nayagan</name>
    <email>hello@senthilnayagan.net</email>
  </author>
  <entry>
    <id>https://www.senthilnayagan.net/blog/introduction-to-rust-closure/</id>
    <title>Introduction to Closure in Rust</title>
    <link href="https://www.senthilnayagan.net/blog/introduction-to-rust-closure/"/>
    <published>2024-06-16T00:00:00.000Z</published>
    <updated>2024-06-16T00:00:00.000Z</updated>
    <category term="closure" />
    <category term="rust" />
    <content type="html">A closure is a programming construct that allows a function to capture and reference variables and parameters from its surrounding lexical scope. Closures offer many benefits and are a key part of the language&#39;s expressive and flexible features.</content>
  </entry>
  <entry>
    <id>https://www.senthilnayagan.net/blog/rust-ownership-and-borrowing/</id>
    <title>Rustâ€™s Ownership and Borrowing Enforce Memory Safety</title>
    <link href="https://www.senthilnayagan.net/blog/rust-ownership-and-borrowing/"/>
    <published>2024-06-12T00:00:00.000Z</published>
    <updated>2024-06-12T00:00:00.000Z</updated>
    <category term="ownership" />
    <category term="borrowing" />
    <category term="memory-management" />
    <content type="html">Rust&#39;s ownership and borrowing features prevent us from experiencing memory-related problems. Rust is a great choice when performance matters and it solves pain points that bother many other languages.</content>
  </entry>
  <entry>
    <id>https://www.senthilnayagan.net/blog/yanked-release/</id>
    <title>What does yanked release mean?</title>
    <link href="https://www.senthilnayagan.net/blog/yanked-release/"/>
    <published>2024-03-07T00:00:00.000Z</published>
    <updated>2024-03-07T00:00:00.000Z</updated>
    <category term="yanked-release" />
    <category term="version-control" />
    <category term="release-management" />
    <content type="html">Released and yanked are terms used in software development to indicate the state of a software package or library. These terms specify whether a given package version is suitable for usage or need to be avoided.</content>
  </entry>
  <entry>
    <id>https://www.senthilnayagan.net/blog/windowing-in-kafka-streams/</id>
    <title>Windowing in Kafka Streams</title>
    <link href="https://www.senthilnayagan.net/blog/windowing-in-kafka-streams/"/>
    <published>2024-02-25T00:00:00.000Z</published>
    <updated>2024-02-25T00:00:00.000Z</updated>
    <category term="kafka-streams" />
    <category term="kafka" />
    <category term="windowing" />
    <content type="html">Windowing refers to the process of dividing a continuous stream of data into discrete segments, or windows, based on time. These windows then serve as the basis for applying computational operations, such as aggregations or transformations, to the data contained within them.</content>
  </entry>
  <entry>
    <id>https://www.senthilnayagan.net/blog/terraform-basics/</id>
    <title>Getting Started with Terraform - Understanding the Basics</title>
    <link href="https://www.senthilnayagan.net/blog/terraform-basics/"/>
    <published>2024-01-16T00:00:00.000Z</published>
    <updated>2024-01-16T00:00:00.000Z</updated>
    <category term="terraform" />
    <category term="infrastructure-as-code" />
    <category term="iac" />
    <content type="html">Terraform is an open source infrastructure-as-code tool that allows us to programmatically provision the physical resources required for an application to run.</content>
  </entry>
  <entry>
    <id>https://www.senthilnayagan.net/blog/anti-pattern/</id>
    <title>Anti-Pattern</title>
    <link href="https://www.senthilnayagan.net/blog/anti-pattern/"/>
    <published>2024-01-16T00:00:00.000Z</published>
    <updated>2024-01-16T00:00:00.000Z</updated>
    <category term="anti-pattern" />
    <category term="design-patterns" />
    <content type="html">Anti-patterns at first seem to be quick and reasonable, they typically have adverse effects in the future. They are design and code smells. It affects our software badly and adds technical debt. We should avoid them at all costs.</content>
  </entry>
  <entry>
    <id>https://www.senthilnayagan.net/blog/envelope-encryption/</id>
    <title>Envelope Encryption - Putting Your Encryption Key in an Envelope Is the Safer Option</title>
    <link href="https://www.senthilnayagan.net/blog/envelope-encryption/"/>
    <published>2022-07-22T00:00:00.000Z</published>
    <updated>2022-07-22T00:00:00.000Z</updated>
    <category term="envelope-encryption" />
    <category term="data-protection" />
    <content type="html">Envelope encryption is a way of encrypting plaintext data using a key and then encrypting that key using an another key. This strategy is intended not just to make things more secure but also to enhance performance.</content>
  </entry>
  
</feed>
